syntax = "proto3";
option optimize_for = SPEED;
option java_multiple_files = true;
option go_package = "fivetran.com/fivetran_sdk";
package fivetran_sdk;

import "google/protobuf/timestamp.proto";

// Fivetran (grpc client) <> Connector (grpc server)
service Connector {
    rpc ConfigurationForm (ConfigurationFormRequest) returns (ConfigurationFormResponse) {}
    rpc Test (TestRequest) returns (TestResponse) {}
    rpc Schema (SchemaRequest) returns (SchemaResponse) {}
    rpc Update (UpdateRequest) returns (stream UpdateResponse) {}
}

message ConfigurationFormRequest {}

message ConfigurationFormResponse {
    bool schema_selection_supported = 1;
    bool table_selection_supported = 2;
    repeated FormField fields = 3;
    repeated ConnectorTest tests = 4;
}

message FormField {
    string name = 1;
    string label = 2;
    bool required = 3;
    oneof type {
        TextField text_field = 4;
        DropdownField dropdown_field = 5;
        ToggleField toggle_field = 6;
    }
}

message DropdownField {
    repeated string dropdown_field = 1;
}

message ToggleField {
    optional string description = 1;
}

enum TextField {
    PlainText = 0;
    Password = 1;
    Hidden = 2;
}

message ConnectorTest {
    string name = 1;            // unique identifier for the test
    string label = 2;           // A few words indicating what we are testing, e.g. 'Connecting to database'
}

message TestRequest {
    string name = 1;
    map<string, string> configuration = 2;
}

message TestResponse {
    oneof response {
        bool success = 1;
        string failure = 2;
        // potential future warning
    }
}

message SchemaRequest {
    map<string, string> configuration = 1;
}

message SchemaResponse {
    oneof response {
        bool schema_response_not_supported = 1;
        SchemaList with_schema = 2;
        TableList without_schema = 3;
    }
}

message SchemaList {
    repeated Schema schemas = 1;
}

message TableList {
    repeated Table tables = 1;
}

message Schema {
    string name = 1;
    repeated Table tables = 2;
}

message Table {
    string name = 1;
    repeated Column columns = 2;
}

message Column {
    string name = 1;
    DataType type = 2;
    bool primary_key = 3;
    optional DecimalParams decimal = 4;
}

message DecimalParams {
    uint32 precision = 1;
    uint32 scale = 2;
}

enum DataType {
    UNSPECIFIED = 0;
    BOOLEAN = 1;
    SHORT = 2;
    INT = 3;
    LONG = 4;
    DECIMAL = 5;
    FLOAT = 6;
    DOUBLE = 7;
    NAIVE_DATE = 8;
    NAIVE_DATETIME = 9;
    UTC_DATETIME = 10;
    BINARY = 11;
    XML = 12;
    STRING = 13;
    JSON = 14;
}

message UpdateRequest {
    map<string, string> configuration = 1;
    optional Selection selection = 2;
    optional string state_json = 3;
}

message Selection {
    oneof selection {
        TablesWithNoSchema without_schema = 1;
        TablesWithSchema with_schema = 2;
    }
}

message TablesWithNoSchema {
    repeated TableSelection tables = 1;
    bool include_new_tables = 2;
}

message TablesWithSchema {
    repeated SchemaSelection schemas = 1;
    bool include_new_schemas = 2;
}

message SchemaSelection {
    bool included = 1;
    string schema_name = 2;
    repeated TableSelection tables = 3;
    bool include_new_tables = 4;
}

message TableSelection {
    bool included = 1;
    string table_name = 2;
    map<string, bool> columns = 3;
    bool include_new_columns = 4;
}

message UpdateResponse {
    oneof response {
        LogEntry log_entry = 1;
        Operation operation = 2;
    }
}

enum LogLevel {
    INFO = 0;
    WARNING = 1;
    SEVERE = 2;
}

message LogEntry {
    LogLevel level = 1;
    string message = 2;
}

message Operation {
    oneof op {
        Record record = 1;
        SchemaChange schema_change = 2;
        Checkpoint checkpoint = 3;
    }
}

message SchemaChange {
    oneof change {
        SchemaList with_schema = 1;
        TableList without_schema = 2;
    }
}

message ValueType {
    oneof inner {
        bool null = 1;
        bool bool = 2;
        int32 short = 3;
        int32 int = 4;
        int64 long = 5;
        float float = 6;
        double double = 7;
        google.protobuf.Timestamp naive_date = 8;
        google.protobuf.Timestamp naive_datetime = 9;
        google.protobuf.Timestamp utc_datetime = 10;
        string decimal = 11;
        bytes binary = 12;
        string string = 13;
        string json = 14;
        string xml = 15;
    }
}

enum OpType {
    UPSERT = 0;
    UPDATE = 1;
    DELETE = 2;
    TRUNCATE = 3;
}

message Record {
    optional string schema_name = 1;
    string table_name = 2;    
    OpType type = 3;
    map<string, ValueType> data = 4;
}

message Checkpoint {
    string state_json = 1;
}
